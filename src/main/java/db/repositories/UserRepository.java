/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package db.repositories;

import com.mycompany.youngfifachampions.Logger;
import com.mycompany.youngfifachampions.YoungFifaChampions;
import db.actions.IUnitOfWork;
import db.classes.User;
import db.mappers.IMapResultSetIntoEntity;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author Tmejs (mateusz.rzad@gmail.com)
 */
public class UserRepository extends RepositoryBase<User> implements IUserRepository {

    public UserRepository(Connection connection, IMapResultSetIntoEntity<User> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);
    }

    @Override
    public User getUserByName(String name) {
        PreparedStatement getByName;
        try {
            getByName = connection.prepareStatement("select * from " + tableName() + " where login =?");
            getByName.setString(1, name);
            ResultSet rs = getByName.executeQuery();
            if(rs.next())
                return mapper.map(rs);
            else{
                return null;
            }

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }catch(Exception ex){
            ex.printStackTrace();
            return null;
        }
    }

    private final static String TABLE_NAME = "USERS";

    @Override
    public String insertSql() {
        return "INSERT INTO "
                + tableName()
                + " (LOGIN,PASSWORD,EMAIL) "
                + "VALUES "
                + "(?,?,?)";
    }

    @Override
    public String updateSql() {
        return "UPDATE "
                + tableName()
                + " set (LOGIN,PASSWORD,EMAIL) ="
                + "(?,?,?)"
                + "where id = ?";
    }

    @Override
    public void insertPrepare(User entity) throws SQLException {
        insert.setString(1, entity.getLogin());
        insert.setString(2, entity.getPassword());
        insert.setString(3, entity.getEmail());
    }

    @Override
    public void updatePrepare(User entity) throws SQLException {
        update.setString(1, entity.getLogin());
        update.setString(2, entity.getPassword());
        update.setString(3, entity.getEmail());
        update.setInt(4, entity.getId());
    }

    @Override
    public String createTableSql() {
        return "create table "
                + tableName()
                + " ("
                + "ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,"
                + "LOGIN VARCHAR(60),"
                + "PASSWORD VARCHAR(60),"
                + "EMAIL VARCHAR(60))";

    }

    @Override
    public String tableName() {
        return TABLE_NAME;
    }

}
